parameters:
    app.name: 'EasyOrder'
    app.description : 'EasyOrder'
    app.host: '%env(APP_HOST)%'
    app.social: [
        'https://www.facebook.com/easy-order',
        'https://twitter.com/easy-order',
        'https://www.linkedin.com/company/easy-order',
    ]
    app.mailer.from: '%env(MAILER_FROM)%'

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $projectDir: '%kernel.project_dir%'

    Shared\:
        resource: '../../'
        exclude:
            - '../../Resources/'
            - '../../DomainModel/Event/'
            - '../../DomainModel/Model/'
            - '../../Tests/'

    # HTTP Client Logging Middleware
    Shared\Infrastructure\HttpClient\HttpClientLoggingMiddleware:
        arguments:
            $logger: '@logger'

    Shared\Infrastructure\HttpClient\HttpClientLoggingMiddlewareFactory:
        arguments:
            $middleware: '@Shared\Infrastructure\HttpClient\HttpClientLoggingMiddleware'

    guzzle.middleware.logging:
        class: Closure
        factory: ['@Shared\Infrastructure\HttpClient\HttpClientLoggingMiddlewareFactory', 'create']

    # Define the HTTP client service
    GuzzleHttp\Client:
        class: GuzzleHttp\Client
        arguments:
            $config:
                handler: '@guzzle.handler'

    guzzle.handler:
        class: GuzzleHttp\HandlerStack
        factory: ['GuzzleHttp\HandlerStack', 'create']
        calls:
            - [push, ['@guzzle.middleware.logging']]

    Psr\Http\Client\ClientInterface: '@GuzzleHttp\Client'

    GuzzleHttp\Psr7\HttpFactory:
        class: GuzzleHttp\Psr7\HttpFactory

    Psr\Http\Message\RequestFactoryInterface: '@GuzzleHttp\Psr7\HttpFactory'
    Psr\Http\Message\UriFactoryInterface: '@GuzzleHttp\Psr7\HttpFactory'

    # Global Assert Validation Error Handler
    Shared\Infrastructure\ErrorHandler\GlobalErrorHandler:
        tags:
            - { name: kernel.event_subscriber }

    Shared\Presentation\Responder\JsonResponder:
        tags:
            - { name: kernel.event_subscriber }

    Shared\Presentation\Responder\HtmlResponder:
        tags:
            - { name: kernel.event_subscriber }

    Shared\Infrastructure\Notification\Symfony\Transport\CustomEmailTransport:
        arguments:
            $mailer: '@mailer.mailer'

    custom-email:
        class: Shared\Infrastructure\Notification\Symfony\Channel\CustomEmailChannel
        arguments:
            $transport: '@Shared\Infrastructure\Notification\Symfony\Transport\CustomEmailTransport'
            $from: '%app.name% <%app.mailer.from%>'
        tags: [ 'notifier.channel' ]
